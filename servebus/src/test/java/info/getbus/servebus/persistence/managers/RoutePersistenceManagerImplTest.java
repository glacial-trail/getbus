package info.getbus.servebus.persistence.managers;import info.getbus.servebus.model.route.Direction;import info.getbus.servebus.model.route.WayPoint;import info.getbus.servebus.persistence.LockedRouteException;import info.getbus.servebus.persistence.datamappers.route.RouteAwareBaseTest;import info.getbus.servebus.persistence.datamappers.route.RouteMapper;import info.getbus.servebus.persistence.datamappers.route.WayPointMapper;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.InOrder;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.Spy;import org.mockito.junit.MockitoJUnitRunner;import java.util.HashSet;import java.util.Random;import java.util.Set;import static org.junit.jupiter.api.Assertions.assertThrows;import static org.mockito.ArgumentMatchers.any;import static org.mockito.ArgumentMatchers.anyCollection;import static org.mockito.ArgumentMatchers.anyInt;import static org.mockito.ArgumentMatchers.eq;import static org.mockito.Mockito.inOrder;import static org.mockito.Mockito.times;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.verifyNoMoreInteractions;import static org.mockito.Mockito.when;@RunWith(MockitoJUnitRunner.class)public class RoutePersistenceManagerImplTest extends RouteAwareBaseTest {    @Mock    private    RouteMapper routeMapper;    @Mock    private    WayPointMapper pointMapper;    @InjectMocks    @Spy    private    RoutePersistenceManagerImpl pm;    @Test    public void savePointsF() throws Exception {        route.setDirection(Direction.F);        testSavePoints();    }    @Test    public void savePointsR() throws Exception {        route.setDirection(Direction.R);        testSavePoints();    }    private void testSavePoints() {        route.setId(2L);        setUpPointIds();        Set<String> existingPointsNames = setUpPointMapper();        pm.savePoints(route);        InOrder inOrder = inOrder(pointMapper);        for (WayPoint wp : route.getRoutePointsInNaturalOrder()) {            if (null == wp.getId()) {                inOrder.verify(pointMapper).insert(eq(route.getId()), eq(wp), anyInt());                inOrder.verify(pointMapper).insertData(eq(wp), eq(route.getDirection()));            } else {                inOrder.verify(pointMapper).update(eq(wp));                inOrder.verify(pointMapper).insertDataIfNonExist(eq(wp), eq(route.getDirection()));                if (existingPointsNames.contains(wp.getName())) {                    inOrder.verify(pointMapper).updateData(eq(wp), eq(route.getDirection()));                }            }        }        inOrder.verify(pointMapper).deleteNotIn(eq(route.getId()), anyCollection());        for (int i = route.getWayPoints().size(); i > 0 ; i--) {            inOrder.verify(pointMapper).updateSequence(any(), eq(i));        }        inOrder.verifyNoMoreInteractions();    }    private void setUpPointIds() {        for (WayPoint wp : route.getWayPoints()) {            long id = 0;            if (new Random().nextBoolean()) {                wp.setId(++id);            }        }    }    private Set<String> setUpPointMapper() {        Set<String> names  = new HashSet<>();        when(pointMapper.insertDataIfNonExist(any(WayPoint.class), any(Direction.class)))                .thenAnswer(                        invocation -> {                            if (new Random().nextBoolean()) {                                WayPoint wp = invocation.getArgument(0);                                names.add(wp.getName());                                return 0;                            }                            return 1;                        });        return names;    }    @Test    public void createRoute() throws Exception {        long transporterAreaId = 44;        user.setTransporterAreaId(transporterAreaId);        pm.createRoute(route, user, true);        InOrder inOrder = inOrder(routeMapper, pm);        inOrder.verify(routeMapper).insertLocked(eq(transporterAreaId), eq(route), eq(user.getUsername()));        verifyNoMoreInteractions(routeMapper);        inOrder.verify(pm, times(1)).savePoints(eq(route));    }    @Test    public void tryToLockFor() throws Exception {        when(routeMapper.selectLockOwnerForUpdate(1L)).thenReturn("11");        pm.tryLockFor(1L, "11");        verify(routeMapper).selectLockOwnerForUpdate(eq(1L));        verifyNoMoreInteractions(routeMapper);    }    @Test    public void tryToLockFor_null() throws Exception {        when(routeMapper.selectLockOwnerForUpdate(1L)).thenReturn(null);        pm.tryLockFor(1L, "11");        InOrder inOrder = inOrder(routeMapper);        inOrder.verify(routeMapper).selectLockOwnerForUpdate(eq(1L));        inOrder.verify(routeMapper).updateLockOwner(eq(1L), eq("11"));        verifyNoMoreInteractions(routeMapper);    }    @Test    public void tryToLockFor_oth() throws Exception {        when(routeMapper.selectLockOwnerForUpdate(1L)).thenReturn("22");        assertThrows(LockedRouteException.class, () -> pm.tryLockFor(1L, "11"));        verify(routeMapper).selectLockOwnerForUpdate(eq(1L));        verifyNoMoreInteractions(routeMapper);    }    @Test    public void checkLock() throws Exception {        when(routeMapper.selectLockOwner(1L)).thenReturn("11");        pm.checkLock(1L, "11");        verify(routeMapper).selectLockOwner(1L);        verifyNoMoreInteractions(routeMapper);    }    @Test    public void checkLock_null() throws Exception {        when(routeMapper.selectLockOwner(1L)).thenReturn(null);        assertThrows(LockedRouteException.class, () -> pm.checkLock(1L, "11"));        verify(routeMapper).selectLockOwner(eq(1L));        verifyNoMoreInteractions(routeMapper);    }    @Test    public void checkLock_other() throws Exception {        when(routeMapper.selectLockOwner(1L)).thenReturn("22");        assertThrows(LockedRouteException.class, () -> pm.checkLock(1L, "11"));        verify(routeMapper).selectLockOwner(eq(1L));        verifyNoMoreInteractions(routeMapper);    }}