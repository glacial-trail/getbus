<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="info.getbus.servebus.route.persistence.mappers.RouteMapper">

  <resultMap id="route" type="Route">
      <id column="id" property="id" />
      <result column="direction" property="direction" />
      <result column="name" property="name" />
      <result column="base_price" property="basePrice" />
      <result column="base_seats_qty" property="baseSeatsQty" />
      <result column="start_sales" property="startSales" />
      <result column="sales_depth" property="salesDepth" />
      <collection property="stops"
                  resultMap="info.getbus.servebus.route.persistence.mappers.RouteStopMapper.routeStop">
      </collection>
  </resultMap>

    <select id="selectCompactRoutesByUsername" resultType="CompactRoute">
        SELECT
            r.id,
            r.name,
            start.name  AS start_stop,
            finish.name AS end_stop,
            CASE WHEN r.lock_owner IS NULL OR r.lock_owner = #{username}
                THEN TRUE
            ELSE FALSE END
                        AS editable
        /*TODO AS in_edit_mode*/
        FROM route r
            INNER JOIN user2transporter u2t ON r.transporter_area_id = u2t.transporter_id
            INNER JOIN users u ON u2t.username = u.username AND u.username = #{username}
            INNER JOIN route_stop start ON r.id = start.route_id AND start.sequence = 1
            INNER JOIN route_stop finish ON r.id = finish.route_id
            INNER JOIN (SELECT
                            max(sequence) AS last,
                            route_id
                        FROM route_stop
                        GROUP BY route_id) AS last_stops
                ON finish.route_id = last_stops.route_id AND finish.sequence = last_stops.last
    </select>

    <select id="selectById" resultMap="route">
        SELECT
          r.id,
          r.name as name,
          r.base_price,
          r.base_seats_qty,
          r.start_sales,
          r.sales_depth,
          #{cid.direction} as direction,
          rs.route_id,
          rs.stop_id,
          coalesce(rs.name, sp.name) as stop_name,
          rs.sequence,
          ai.id as address_id,
          ai.country,
          al.admin_area1,
          al.city,
          al.street_building,
          al.street,
          al.building,
          ai.zip,
          ai.utc_offset,
          rl.distance,
          rt.arrival,
          rt.departure,
          rt.trip_time
        FROM route r
        LEFT JOIN route_stop rs ON r.id = rs.route_id
        JOIN stop_place sp ON rs.stop_id = sp.id
        JOIN address_i ai ON sp.address_id = ai.id
        JOIN address_l10n al ON ai.id = al.id AND al.lang = '--' /*TODO remove left join after route split*/
        LEFT JOIN route_length rl ON rs.route_id = rl.route_id AND rs.stop_id = rl.route_stop_id AND rl.direction = #{cid.direction}
        LEFT JOIN route_timetable rt ON rs.route_id = rt.route_id AND rs.stop_id = rt.route_stop_id AND rt.direction = #{cid.direction}
        WHERE r.id = #{cid.id}
        ORDER BY sequence
        <choose>
            <when test='cid.direction.name == "F"'>
                ASC
            </when>
            <otherwise>
                DESC
            </otherwise>
        </choose>
    </select>

    <select id="selectShallowById" resultMap="route">
        SELECT
            r.id,
            r.name AS name,
            r.base_price,
            r.base_seats_qty,
            r.start_sales,
            r.sales_depth
        FROM route r
        WHERE r.id = #{cid.id}
    </select>

  <select id="selectLockOwner" resultType="string">
    SELECT
      lock_owner
    FROM route
    WHERE id = #{id}
  </select>

  <select id="selectLockOwnerForUpdate" resultType="string">
    SELECT
      lock_owner
    FROM route
    WHERE id = #{id}
    FOR UPDATE
  </select>

  <insert id="insertLocked" useGeneratedKeys="true" keyProperty="route.id" keyColumn="id">
    INSERT INTO route (
      transporter_area_id,
      name,
      base_price,
      base_seats_qty,
      start_sales,
      sales_depth,
      lock_owner
    ) VALUES (
      #{transporterAreaId},
      #{route.name},
      #{route.basePrice},
      #{route.baseSeatsQty},
      #{route.startSales},
      #{route.salesDepth},
      #{lockOwner}
    )
  </insert>

  <update id="update">
      UPDATE route
      SET
          name           = #{route.name},
          base_price     = #{route.basePrice},
          base_seats_qty = #{route.baseSeatsQty},
          start_sales    = #{route.startSales},
          sales_depth    = #{route.salesDepth}
      WHERE id = #{route.id}
  </update>

  <update id="updateLockOwner">
    UPDATE route
    SET lock_owner = #{lockOwner}
    WHERE id = #{id}
  </update>

  <update id="unlockRoute">
    UPDATE route
    SET lock_owner = NULL
    WHERE id = #{id}
  </update>

</mapper>