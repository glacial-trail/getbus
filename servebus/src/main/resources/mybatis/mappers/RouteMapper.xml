<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="info.getbus.servebus.route.persistence.mappers.RouteMapper">

  <resultMap id="route" type="Route">
      <id column="id" property="id" />
      <result column="direction" property="direction" />
      <result column="name" property="name" />
      <result column="base_price" property="basePrice" />
      <result column="base_seats_qty" property="baseSeatsQty" />
      <result column="start_sales" property="startSales" />
      <result column="sales_depth" property="salesDepth" />
      <collection property="wayPoints" ofType="info.getbus.servebus.route.model.WayPoint">
          <id column="wp_id" property="id" />
          <result column="wp_name" property="name" />
          <result column="wp_country_code" property="countryCode" />
          <result column="wp_address" property="address" />
          <result column="wp_departure" property="departure" />
          <result column="wp_arrival" property="arrival" />
          <result column="wp_trip_time" property="tripTime" />
          <result column="wp_distance" property="distance" />
      </collection>
  </resultMap>

  <select id="selectCompactRoutesByUsername" resultType="CompactRoute">
    SELECT
      r.id,
      r.name,
      start.name AS start_point,
      finish.name AS end_point,
      CASE WHEN r.lock_owner IS NULL OR r.lock_owner = #{username} THEN TRUE ELSE FALSE END
        AS editable
        /*TODO AS in_edit_mode*/
    FROM route r
    INNER JOIN user2transporter u2t ON r.transporter_area_id = u2t.transporter_id
    INNER JOIN users u ON u2t.username = u.username AND u.username = #{username}
    INNER JOIN way_point start ON r.id = start.route_id AND start.sequence = 1
    INNER JOIN way_point finish ON r.id = finish.route_id
    INNER JOIN (SELECT
                  max(sequence) AS last,
                  route_id
                FROM way_point
                GROUP BY route_id) AS last_points
      ON finish.route_id = last_points.route_id AND finish.sequence = last_points.last
  </select>

  <select id="selectById" resultMap="route">
    SELECT
      r.id,
      r.name,
      r.base_price,
      r.base_seats_qty,
      r.start_sales,
      r.sales_depth,
      #{cid.direction} as direction,
      wp.id           as wp_id,
      wp.sequence     as wp_sequence,
      wp.name         as wp_name,
      wp.country_code as wp_country_code,
      wp.address      as wp_address,
      wpd.departure   as wp_departure,
      wpd.arrival     as wp_arrival,
      wpd.trip_time   as wp_trip_time,
      wpd.distance    as wp_distance
    FROM route r
      LEFT JOIN way_point wp ON r.id = wp.route_id
      LEFT JOIN way_point_data wpd ON wpd.way_point_id = wp.id
        AND wpd.direction = #{cid.direction}
    WHERE r.id = #{cid.id}
    ORDER BY sequence
    <choose>
      <when test='cid.direction.name == "F"'>
          ASC
      </when>
      <otherwise>
        DESC
      </otherwise>
    </choose>
  </select>

  <select id="selectLockOwner" resultType="string">
    SELECT
      lock_owner
    FROM route
    WHERE id = #{id}
  </select>

  <select id="selectLockOwnerForUpdate" resultType="string">
    SELECT
      lock_owner
    FROM route
    WHERE id = #{id}
    FOR UPDATE
  </select>

  <insert id="insertLocked" useGeneratedKeys="true" keyProperty="route.id" keyColumn="id">
    INSERT INTO route (
      transporter_area_id,
      name,
      base_price,
      base_seats_qty,
      start_sales,
      sales_depth,
      lock_owner
    ) VALUES (
      #{transporterAreaId},
      #{route.name},
      #{route.basePrice},
      #{route.baseSeatsQty},
      #{route.startSales},
      #{route.salesDepth},
      #{lockOwner}
    )
  </insert>

  <update id="update">
      UPDATE route
      SET
          name           = #{route.name},
          base_price     = #{route.basePrice},
          base_seats_qty = #{route.baseSeatsQty},
          start_sales    = #{route.startSales},
          sales_depth    = #{route.salesDepth}
      WHERE id = #{route.id}
  </update>

  <update id="updateLockOwner">
    UPDATE route
    SET lock_owner = #{lockOwner}
    WHERE id = #{id}
  </update>

  <update id="unlockRoute">
    UPDATE route
    SET lock_owner = NULL
    WHERE id = #{id}
  </update>

    <select id="selectIsRouteLocked" resultType="_boolean">
        SELECT EXISTS (
        SELECT id FROM route WHERE id = #{id} AND (lock_owner IS NOT NULL AND lock_owner != #{except})
        )
    </select>

</mapper>